id: temporal_operators
title: How to use basic temporal operators
description: >-
  This tutorial will give you a quick walkthrough of the basic temporal operators available
  in the Bio-Model Analyzer. 
  It will take around 10 minutes, and by the end of this you should know how to successfully
  use the operators; EVENTUALLY, ALWAYS, NEXT, and UNTIL.
steps:
    - text: >-
        In this tutorial we will be looking at how to use temporal operators within our queries.
        As you may be familiar with the Ecoli model from other tutorials, reupload that into the 
        BMA tool using the link below.

      model: ecoli1.json

    - text: >- 
        The EVENTUALLY operator is used in cases when we need to test if a query is satisfied 
        sometime in a future state. In this example, we have the 'Motor' that has a value of 1, 
        create this state using the LTL state editor.

      image: define_model_state.png

    - text: >-
        As an example we want to test the endpoint of our model, to see if the state is satisfied at
        some point. This can be achieved using the EVENTUALLY operator. Drag and drop EVENTUALLY 
        into the canvas and plug in state 'A' into the socket.

    - text: >- 
        Run the query, it should turn green. A solid green query indicates that the query has been 
        satisifed, and therefore state 'A' eventually becomes true at some future state in time. However
        it is important to note that EVENTUALLY does not require 'A' to remain true forever, and the 
        state of 'A' may change again. 

      image: run_eventuallya.png

    - text: >-
        Now we will move onto the operator ALWAYS. This operator can be used to check if a state 
        stays constant within all traces. Using the same ecoli model and motor state defined, run 
        'ALWAYS A'.
        NOTE: EVENTUALLY is sometimes mistaken for ALWAYS, however it is important to note that the 
        true value of 'A' holds with ALWAYS, but is percebtible to change with EVENTUALLY.

      image: run_alwaysa.png  

    - text: >-
        This should result in some true and some false cases. Examine the cases that satisfy the query 
        by clicking the green examples. Here, you can see a trace of 10 steps where the motor stays 
        within the unbiased state with a constant value at 1.

      image: examine_alwaysa.png

    - text: >- 
        Moving on, we will now look at the NEXT operator. It is important to note that the NEXT operator 
        is very rarely used on its own, and usually requires a prerequisite. So for example, in the example 
        'A AND NEXT B', we are implying that 'A' is true at some point, and the immediate next state holds 
        'B' as true.
    
    - text: >-
        NOTE: NEXT is sometimes mistaken for IMPLIES, and it is important to note the difference. 
        IMPLIES requires both operands to be true at the same time, whereas NEXT is looking for a future 
        state. 

    - text: >-
        To practice and learn the syntax behind the NEXT operator please visit the Phosphorylation cascade
        tutorial. 

    - text: >- 
        The last temporal operator that we will be looking at within this tutorial is the UNTIL operator. This 
        is used in instances when we need to check if a certain state is true up until another state 
        or expression becomes true. So similar to NEXT, we have a transition of states, but in this case 
        the prerequisite can remain true for more than one step. 

    - text: >- 
        Using the same ecoli model as above, create a new state 'B' which refers to the extracellular protein
        Nickel and assign it to a value of 1. Now create a new temporal query stating 'A UNTIL B', and run it.

    - text: >- 
        Lets look at the results for true cases. Please see image below to check if you have obtained the 
        correct results. 

      image: examine_auntilb.png

    - text: >-
        In the graph you can examine how state values change over time. Select only the motor and nickel 
        variables to view on the graph. We can see that 'A' remains true for 2 steps and then 'B' returns a 
        value of 1. Hence, this proves that 'A UNTIL B' is true. 
        NOTE: The grey blocks in the graph represent the time steps that states A/B remain true for.

      image: results_auntilb.png

    - text: >-
        If you faced difficulty following the tutorial, access the complete model using the link 
        below:

      model: temporal_ecoli.json

    - text: >-
        This is the end of the 'How to use temporal operators' tutorial, you should now be comfortable using 
        and experimenting with operators; EVENTUALLY, ALWAYS, NEXT, and UNTIL.