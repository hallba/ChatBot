id: phosphorylation_cascade
title: Using the NEXT operator - Phosphorylation Cascade
description: >-
  The purpose of this tutorial is to practice using the NEXT operator with other 
  operators and we will be doing this by experimenting with a Boolean network model 
steps:
    - text: >-
        To complete this tutorial please use the model below.

      model: PhosCas.json

    - text: >- 
        Experimentally we know that if a cell is in an environment with a low or high level of 'I', 
        the level of phosphorylated 'x' is low. We can interpret and test this behaviour in terms of 
        stability; the model should be stable with 'x=0' if 'I' is constant and equals either 0 or 1. 
        However, if we increase 'I' and maintain a high level, we see a transient increase in 'x'. 

    - text: >-
        To test this using LTL we need to specify two parts of the query. The states describe what the 
        simulation should look like at different points in time. In this system we can define the following;
        State 'A' as 'X = 0', state 'B' as 'X = 1'. 

    - text: >- 
        'A' describes the initial and final states, whilst 'B' is the transient state. We define this using 
        the state editor, selecting the variable 'X' and its value for each state.

      image: states_phoscas.png
    
    - text: >- 
        We now need to describe the relationships between these states in time. The transient activation
        of 'X' could be described textually as 'A' occurs, followed by 'B', which is followed by 'A' again. We 
        can do this in the query editor using the drag and drop interface. To describe the fall in 'X' 
        activity we can use 'B AND NEXT A'.

      image: b_and_nexta.png

    - text: >- 
        This states that we are looking for a simulation where at one point 'B' is true, and in the subsequent 
        step 'A' is true. To expand this to include the whole transient activation we can use the term shown 
        below.

      image: phoscas_1.png

    - text: >- 
        This states that the simulation has a state where 'A' is true, followed by a state where 'B' is true, 
        followed by 'A' being true. Once this is constructed we can test the query, which tells us that it is 
        sometimes true (shown by green stripes) and therefore the specification is satisfied. This can be 
        confirmed by examining the example simulation where it occurs. 
     
    - text: >-
        This however will only work for systems where we know that the transient effect lasts for a single 
        step of time. A query which is not specific for this time period can be constructed as above using 
        the form shown below.

      image: phoscas_2.png

    - text: >-
        NOTE: You can modify the length of simulation you are searching for. This can change your results 
        so you may wish to explore this parameter when testing real systems.

    - text: >-
        If you faced difficulty following the tutorial, access the complete model using the link 
        below:

        model: phoscas_final.json

    - text: >-
        You have now reached the end of this tutorial. You should be familiar with cases the NEXT operator 
        may be used for, and how it can be combined with other operators to achieve the required results. 





